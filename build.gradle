buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven { url "http://clojars.org/repo" }
	maven { url  "http://dl.bintray.com/kotarak/clojuresque" }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }

    }
    dependencies {
	classpath 'de.kotka.clojuresque:clojuresque:2.0.0'
	classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}

repositories {maven { url "http://clojars.org/repo" }}

apply plugin: 'de.kotka.clojuresque.clojure'

clojure.warnOnReflection = true
clojure.aotCompile = true

apply plugin: 'net.minecraftforge.gradle.forge'

version = ""
group= "yoshiquest.test_mod" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "test_mod"

minecraft {
    version = "1.8.9-11.15.1.1722"
    runDir = "eclipse"
    mappings = "stable_22"
}

configurations {
	shade
	compile.extendsFrom shade
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

	compile 'org.clojure:clojure:1.8.0'
	compile files("forge_clj.jar")
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

tasks.build.dependsOn('deobfJar')

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
